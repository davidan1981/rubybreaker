# Dynamic Type Checker

Type documentation generated by RubyBreaker can be more useful if the types
are actually enforced during runtime. In order to do this, each method has
to be dynamically instrumented (as "breakable" methods are) and inspected
for each argument type and return type. Although this is still a dynamic
type checking, it finds type errors earlier in the program execution.

# Additional Testing Frameworks

RubyBreaker supports the built-in testing framework and RSpec. There are
other testing frameworks such as Cucumber or Shouda. Since RubyBreaker's
goal is to help Ruby programmers write better code by taking advantage of
existing test suites, it seems appropriate to support as many testing
frameworks as possible.

# RDoc and YARD Documentation Support

It is cool (and actually useful in a way) to output the type documentation
in an executable Ruby code. However, for documetation purpose, it would be
better to have the information in RDoc or YARD format.

# Core Library Documentation

The core idea behind RubyBreaker is the incremental type documentation,
starting from the core library to the application level modules.
Unfortunately, due to technical difficulties, it is not intuitive to
auto-document the core library code. Thus, it might be necessary to document
it manually and import this information for upper-level modules.

# Ruby on Rails Support

What more can I say?

