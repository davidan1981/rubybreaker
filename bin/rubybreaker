#!/usr/bin/env ruby
require_relative "../lib/rubybreaker"

module RubyBreaker

  # This method shows the banner and exits with code 1.
  def self.show_banner_and_exit()
    puts OPTION_PARSER.banner
    exit(1)
  end

  # This method prepares the command mode execution of RubyBreaker.
  def self.main()
    RubyBreaker.setup_logger()
    RubyBreaker.verbose("Running RubyBreaker in the command mode")

    # parse the command-line arguments
    OPTION_PARSER.parse!   

    # Show copyright info if verbose
    puts COPYRIGHT if OPTIONS[:verbose]     

    # Quit if there is program specified.
    self.show_banner_and_exit() if ARGV.length != 1

    # It is required to specify at least one library and one module/class to
    # break. Otherwise, it does not make sense to run RubyBreaker. So it
    # will quit.
    if OPTIONS[:libs].empty?
      STDERR.puts "No library is specified."
      exit(1)
    elsif OPTIONS[:break].empty?
      STDERR.puts "No module/class is specified to break."
      exit(1)
    end

    # Get the specified program.
    prog_name = ARGV[0]
    prog = File.expand_path(prog_name)

    # It is ok to omit .rb extension. So try to see if prog.rb exists
    if !File.exist?(prog) && !File.extname(prog) == ".rb" 
      prog = "#{prog}.rb"
    end 

    # Quit the specified program does not exist.
    if !File.exist?(prog)
      fatal("#{ARGV[0]} is an invalid file.")
      exit(1)
    end

    # Remember the program path for later use
    OPTIONS[:prog] = prog

    # Import the libraries specified.
    OPTIONS[:libs].each do |lib|
      # Run the program file!
      self.verbose("Importing #{lib}")
      eval "require '#{lib}'", TOPLEVEL_BINDING
      self.verbose("Done importing #{lib}")
    end

    # Runs the main library code at this point
    RubyBreaker.run()

    # Run the program file!
    self.verbose("Running #{prog_name}")
    eval "require '#{prog}'", TOPLEVEL_BINDING
    self.verbose("Done running #{prog_name}")
  end

end

RubyBreaker.main()
